// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/ouroboros.proto

package ouroboros_kv

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KvDataHashProto represents the metadata for stored data with chunk hashes
type KvDataHashProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                    // Key of the content (hash.Hash as bytes)
	ChunkHashes   [][]byte               `protobuf:"bytes,2,rep,name=chunk_hashes,json=chunkHashes,proto3" json:"chunk_hashes,omitempty"` // Hashes of KvDataShards
	Parent        []byte                 `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`                              // Key of the parent chunk
	Children      [][]byte               `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`                          // Keys of the child chunks
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KvDataHashProto) Reset() {
	*x = KvDataHashProto{}
	mi := &file_proto_ouroboros_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvDataHashProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvDataHashProto) ProtoMessage() {}

func (x *KvDataHashProto) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ouroboros_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvDataHashProto.ProtoReflect.Descriptor instead.
func (*KvDataHashProto) Descriptor() ([]byte, []int) {
	return file_proto_ouroboros_proto_rawDescGZIP(), []int{0}
}

func (x *KvDataHashProto) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KvDataHashProto) GetChunkHashes() [][]byte {
	if x != nil {
		return x.ChunkHashes
	}
	return nil
}

func (x *KvDataHashProto) GetParent() []byte {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *KvDataHashProto) GetChildren() [][]byte {
	if x != nil {
		return x.Children
	}
	return nil
}

// KvDataShardProto represents a chunk of content that will be stored in the key-value store
type KvDataShardProto struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash               []byte                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`                                                // After chunking and before compression, encryption and erasure coding
	EncodedHash             []byte                 `protobuf:"bytes,2,opt,name=encoded_hash,json=encodedHash,proto3" json:"encoded_hash,omitempty"`                                          // After compression, encryption and erasure, including all the metadata
	ReedSolomonShards       uint32                 `protobuf:"varint,3,opt,name=reed_solomon_shards,json=reedSolomonShards,proto3" json:"reed_solomon_shards,omitempty"`                     // Number of shards in Reed-Solomon coding
	ReedSolomonParityShards uint32                 `protobuf:"varint,4,opt,name=reed_solomon_parity_shards,json=reedSolomonParityShards,proto3" json:"reed_solomon_parity_shards,omitempty"` // Number of parity shards in Reed-Solomon coding
	ReedSolomonIndex        uint32                 `protobuf:"varint,5,opt,name=reed_solomon_index,json=reedSolomonIndex,proto3" json:"reed_solomon_index,omitempty"`                        // Index of the chunk in the Reed-Solomon coding
	Size                    uint64                 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                                                                          // Size of the shard in bytes
	OriginalSize            uint64                 `protobuf:"varint,7,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"`                                      // Size of the original encrypted chunk before Reed-Solomon encoding
	EncapsulatedKey         []byte                 `protobuf:"bytes,8,opt,name=encapsulated_key,json=encapsulatedKey,proto3" json:"encapsulated_key,omitempty"`                              // ML-KEM encapsulated secret for the chunk
	Nonce                   []byte                 `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                                         // AES-GCM nonce for encryption
	ChunkContent            []byte                 `protobuf:"bytes,10,opt,name=chunk_content,json=chunkContent,proto3" json:"chunk_content,omitempty"`                                      // Content of the chunk after compression, encryption and erasure coding
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *KvDataShardProto) Reset() {
	*x = KvDataShardProto{}
	mi := &file_proto_ouroboros_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvDataShardProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvDataShardProto) ProtoMessage() {}

func (x *KvDataShardProto) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ouroboros_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvDataShardProto.ProtoReflect.Descriptor instead.
func (*KvDataShardProto) Descriptor() ([]byte, []int) {
	return file_proto_ouroboros_proto_rawDescGZIP(), []int{1}
}

func (x *KvDataShardProto) GetChunkHash() []byte {
	if x != nil {
		return x.ChunkHash
	}
	return nil
}

func (x *KvDataShardProto) GetEncodedHash() []byte {
	if x != nil {
		return x.EncodedHash
	}
	return nil
}

func (x *KvDataShardProto) GetReedSolomonShards() uint32 {
	if x != nil {
		return x.ReedSolomonShards
	}
	return 0
}

func (x *KvDataShardProto) GetReedSolomonParityShards() uint32 {
	if x != nil {
		return x.ReedSolomonParityShards
	}
	return 0
}

func (x *KvDataShardProto) GetReedSolomonIndex() uint32 {
	if x != nil {
		return x.ReedSolomonIndex
	}
	return 0
}

func (x *KvDataShardProto) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *KvDataShardProto) GetOriginalSize() uint64 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

func (x *KvDataShardProto) GetEncapsulatedKey() []byte {
	if x != nil {
		return x.EncapsulatedKey
	}
	return nil
}

func (x *KvDataShardProto) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *KvDataShardProto) GetChunkContent() []byte {
	if x != nil {
		return x.ChunkContent
	}
	return nil
}

var File_proto_ouroboros_proto protoreflect.FileDescriptor

const file_proto_ouroboros_proto_rawDesc = "" +
	"\n" +
	"\x15proto/ouroboros.proto\x12\vouroboroskv\"z\n" +
	"\x0fKvDataHashProto\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12!\n" +
	"\fchunk_hashes\x18\x02 \x03(\fR\vchunkHashes\x12\x16\n" +
	"\x06parent\x18\x03 \x01(\fR\x06parent\x12\x1a\n" +
	"\bchildren\x18\x04 \x03(\fR\bchildren\"\x8e\x03\n" +
	"\x10KvDataShardProto\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\fR\tchunkHash\x12!\n" +
	"\fencoded_hash\x18\x02 \x01(\fR\vencodedHash\x12.\n" +
	"\x13reed_solomon_shards\x18\x03 \x01(\rR\x11reedSolomonShards\x12;\n" +
	"\x1areed_solomon_parity_shards\x18\x04 \x01(\rR\x17reedSolomonParityShards\x12,\n" +
	"\x12reed_solomon_index\x18\x05 \x01(\rR\x10reedSolomonIndex\x12\x12\n" +
	"\x04size\x18\x06 \x01(\x04R\x04size\x12#\n" +
	"\roriginal_size\x18\a \x01(\x04R\foriginalSize\x12)\n" +
	"\x10encapsulated_key\x18\b \x01(\fR\x0fencapsulatedKey\x12\x14\n" +
	"\x05nonce\x18\t \x01(\fR\x05nonce\x12#\n" +
	"\rchunk_content\x18\n" +
	" \x01(\fR\fchunkContentB\x1fZ\x1dgithub.com/i5heu/ouroboros-kvb\x06proto3"

var (
	file_proto_ouroboros_proto_rawDescOnce sync.Once
	file_proto_ouroboros_proto_rawDescData []byte
)

func file_proto_ouroboros_proto_rawDescGZIP() []byte {
	file_proto_ouroboros_proto_rawDescOnce.Do(func() {
		file_proto_ouroboros_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ouroboros_proto_rawDesc), len(file_proto_ouroboros_proto_rawDesc)))
	})
	return file_proto_ouroboros_proto_rawDescData
}

var file_proto_ouroboros_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_ouroboros_proto_goTypes = []any{
	(*KvDataHashProto)(nil),  // 0: ouroboroskv.KvDataHashProto
	(*KvDataShardProto)(nil), // 1: ouroboroskv.KvDataShardProto
}
var file_proto_ouroboros_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_ouroboros_proto_init() }
func file_proto_ouroboros_proto_init() {
	if File_proto_ouroboros_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ouroboros_proto_rawDesc), len(file_proto_ouroboros_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ouroboros_proto_goTypes,
		DependencyIndexes: file_proto_ouroboros_proto_depIdxs,
		MessageInfos:      file_proto_ouroboros_proto_msgTypes,
	}.Build()
	File_proto_ouroboros_proto = out.File
	file_proto_ouroboros_proto_goTypes = nil
	file_proto_ouroboros_proto_depIdxs = nil
}
